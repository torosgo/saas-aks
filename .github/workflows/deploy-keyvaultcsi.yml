name: Create keyvault, csi provider and use in tenant namespace
on: 
  workflow_dispatch:
    inputs:
      tenant:
        description: Tenant name. Use lowercase alphanumeric characters az09
        default: Tenant Name
        required: true
      keyvault:
        description: set 'yes' to activate keyvault steps step, else deactivates
        default: "yes"
        required: true
      csikeyvault:
        description: set 'yes' to activate csi keyvault steps step, else deactivates
        default: "yes"
        required: true

env:
  RESOURCEGROUPNAME: "demo-saas-aks"
  CLUSTERNAME: "demo-saas-aks"
  LOCATION-RG: "westeurope"

jobs:
  netpol:
    name: Keyvault CSI Job
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # login to azure
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get AKS Credentials
      id: getContext
      run: |
          az aks get-credentials --resource-group ${{ env.RESOURCEGROUPNAME }} --name ${{ env.CLUSTERNAME }} --file $GITHUB_WORKSPACE/kubeconfig
          echo "KUBECONFIG=$GITHUB_WORKSPACE/kubeconfig" >> $GITHUB_ENV

    - name: Create namespace
      run: |
        namespacePresent=`kubectl get namespace | grep ${{ github.event.inputs.tenant }} | wc -l`
        if [ $namespacePresent -eq 0 ]
        then
            echo `kubectl create namespace ${{ github.event.inputs.tenant }}`
        fi

    - name: Create Azure Key Vault 
      # if: ${{ false }}
      if: "${{ github.event.inputs.keyvault == 'yes' }}"
      id: createKeyvault
      run: |
          az keyvault create -g ${{ env.RESOURCEGROUPNAME }} -n ${{ env.CLUSTERNAME }} -l ${{ env.LOCATION-RG }}
          az keyvault secret set --vault-name ${{ env.CLUSTERNAME }} -n ExampleSecret --value MyAKSExampleSecret
 
    - name: Enable Azure Key Vault Provider for Secrets Store CSI Driver
      # if: ${{ false }}
      if: "${{ github.event.inputs.csikeyvault == 'yes' }}"
      id: enableKeyvaultCSI
      run: |
          az aks enable-addons --addons azure-keyvault-secrets-provider -g ${{ env.RESOURCEGROUPNAME }} -n ${{ env.CLUSTERNAME }}
          echo `kubectl get pods -n kube-system -l 'app in (secrets-store-csi-driver,secrets-store-provider-azure)'`
       
    - name: Use the CSI Secret Store addon user-assigned managed identity
      # if: ${{ false }}
      if: "${{ github.event.inputs.csikeyvault == 'yes' }}"
      id: useCSIaddon
      run: |
          kvclientId=$(az aks show -g ${{ env.RESOURCEGROUPNAME }} -n ${{ env.CLUSTERNAME }} --query addonProfiles.azureKeyvaultSecretsProvider.identity.clientId -o tsv)
          tenantId=$(az aks show -g ${{ env.RESOURCEGROUPNAME }} -n ${{ env.CLUSTERNAME }} --query aadProfile.tenantId -o tsv)
          az keyvault set-policy -n ${{ env.CLUSTERNAME }} --key-permissions get --spn $kvclientId
          az keyvault set-policy -n ${{ env.CLUSTERNAME }} --secret-permissions get --spn $kvclientId
          az keyvault set-policy -n ${{ env.CLUSTERNAME }} --certificate-permissions get --spn $kvclientId
          sed -e "s/<client-id>/${{ secrets.CLIENTID }}/g" -e "s/<key-vault-name>/${{ env.CLUSTERNAME }}/g" -e "s/<tenant-id>/$tenantId/g"  ./k8s/secretproviderclass.yaml | kubectl apply -n ${{ github.event.inputs.tenant }} -f -
          kubectl apply -n ${{ github.event.inputs.tenant }} -f ./k8s/podusingcsisecret.yaml
          echo `kubectl get pods -n kube-system -l 'app in (secrets-store-csi-driver,secrets-store-provider-azure)'`
      
    - name : Cleanup
      run: | 
        az logout
        rm -rf $GITHUB_WORKSPACE/kubeconfig
